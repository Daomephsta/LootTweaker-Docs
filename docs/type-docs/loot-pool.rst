LootPool
========

:full name: ``loottweaker.vanilla.loot.LootPool``

Each instance of this type represents a specific pool of a loot table.

Condition and function formatting
---------------------------------
Conditions and functions should be supplied to methods as arrays of `DataMaps <https://crafttweaker.readthedocs.io/en/latest/#Vanilla/Data/DataMap/>`_ 
or [helper type methods](). Do not supply the conditions as part of a parent tag. 
When using `DataMap <https://crafttweaker.readthedocs.io/en/latest/#Vanilla/Data/DataMap/>`_ to supply conditions or functions, 
it is recommended that you surround the keys with double quotes("), as otherwise any keys which are zenscript keywords(e.g function) will cause issues.

Recommended::

    [
       {
        "count":
        {
        "min": 0.0,
        "max": 2.0
        },
        "function": "minecraft:set_count"
       }
    ]

Not Recommended::

    [
       {
        count:
        {
        min: 0.0,
        max: 2.0
        },
        function: "minecraft:set_count"
       }
    ] 

Methods
-------

See :doc:`here <method-documentation-format>` for an explanation of the method documentation format used on this page.

.. java:method:: void addConditionsJson(DataMap[] conditions)
    :outertype: LootPool

    Adds conditions to the pool. 
    
    :param conditions: an array of instances of `DataMap <https://crafttweaker.readthedocs.io/en/latest/#Vanilla/Data/DataMap/>`_, each a LootCondition in JSON form. It is recommended that the keys are enclosed in quotes to avoid conflicts between JSON key names and ZenScript keywords.
    :errors: if any of the elements of ``conditions`` are not instances of ``DataMap``.

.. java:method:: void addConditionsHelper(LootCondition[] conditions)
    :outertype: LootPool

    Adds conditions to the pool. 
    
    :param conditions: an array of instances of LootCondition

.. java:method:: void removeEntry(String entryName)
    :outertype: LootPool
    
    Removes the entry with a matching ``entryName`` tag from the pool

    :param entryName: The unique name of the target entry

.. java:method:: void addItemEntryJson(IItemStack iStack, int weight, int quality, DataMap[] functions, DataMap[] conditions, @Optional String name)
    :outertype: LootPool

    Adds a new ``item`` type entry to the pool.

    :param iStack: the item stack the entry should produce. LootTweaker will autogenerate *set_nbt*, *set_damage*/*set_data* and *set_count* functions based on this stack, unless ``functions`` contains a function of the same type. 
    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param quality: determines how much the Luck attribute affects the generation chance. Higher qualities make the luck attribute affect the generation chance more.
    :param functions: an array of instances of `DataMap <https://crafttweaker.readthedocs.io/en/latest/#Vanilla/Data/DataMap/>`_, each a LootFunction in JSON form. It is recommended that the keys are enclosed in quotes to avoid conflicts between JSON key names and ZenScript keywords.
    :param conditions: an array of instances of `DataMap <https://crafttweaker.readthedocs.io/en/latest/#Vanilla/Data/DataMap/>`_, each a LootCondition in JSON form. It is recommended that the keys are enclosed in quotes to avoid conflicts between JSON key names and ZenScript keywords.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void addItemEntryHelper(IItemStack iStack, int weight, int quality, LootFunction[] functions, LootCondition[] conditions, @Optional String name)
    :outertype: LootPool

    Adds a new ``item`` type entry to the pool.

    :param iStack: the item stack the entry should produce. LootTweaker will autogenerate *set_nbt*, *set_damage*/*set_data* and *set_count* functions based on this stack, unless ``functions`` contains a function of the same type. 
    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param quality: determines how much the Luck attribute affects the generation chance. Higher qualities make the luck attribute affect the generation chance more.
    :param functions: functions that affect the stack(s) generated by the entry.
    :param conditions: conditions for the generation of the entry.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void addItemEntry(IItemStack stack, int weightIn, int qualityIn, @Optional String name)
    :outertype: LootPool

    Adds a new ``item`` type entry to the pool, with no conditions or functions.

    :param iStack: the item stack the entry should produce. LootTweaker will autogenerate *set_nbt*, *set_damage*/*set_data* and *set_count* functions based on this stack, unless ``functions`` contains a function of the same type. 
    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void addItemEntry(IItemStack stack, int weightIn, @Optional String name)
    :outertype: LootPool

    Adds a new ``item`` type entry to the pool, with no conditions or functions, and a quality of 0.

    :param iStack: the item stack the entry should produce. LootTweaker will autogenerate *set_nbt*, *set_damage*/*set_data* and *set_count* functions based on this stack, unless ``functions`` contains a function of the same type. 
    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void addLootTableEntryJson(String tableName, int weightIn, int qualityIn, DataMap[] conditions, @Optional String name)
    :outertype: LootPool

    Adds a new ``loot_table`` type entry to the pool.

    :param tableName: the identifier for the table the entry should generate loot from.
    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param quality: determines how much the Luck attribute affects the generation chance. Higher qualities make the luck attribute affect the generation chance more.
    :param conditions: an array of instances of `DataMap <https://crafttweaker.readthedocs.io/en/latest/#Vanilla/Data/DataMap/>`_, each a LootCondition in JSON form. It is recommended that the keys are enclosed in quotes to avoid conflicts between JSON key names and ZenScript keywords.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void addLootTableEntryHelper(String tableName, int weightIn, int qualityIn, LootCondition[] conditions, @Optional String name)
    :outertype: LootPool

    Adds a new ``loot_table`` type entry to the pool.

    :param tableName: the identifier for the table the entry should generate loot from.
    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param quality: determines how much the Luck attribute affects the generation chance. Higher qualities make the luck attribute affect the generation chance more.
    :param conditions: conditions for the generation of the entry.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void addLootTableEntry(String tableName, int weightIn, int qualityIn, @Optional String name)
    :outertype: LootPool

    Adds a new ``loot_table`` type entry to the pool with no conditions.

    :param tableName: the identifier for the table the entry should generate loot from.
    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param quality: determines how much the Luck attribute affects the generation chance. Higher qualities make the luck attribute affect the generation chance more.
    :param conditions: conditions for the generation of the entry.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void addLootTableEntry(String tableName, int weightIn, @Optional String name)
    :outertype: LootPool

    Adds a new ``loot_table`` type entry to the pool with no conditions, and a quality of 0.

    :param tableName: the identifier for the table the entry should generate loot from.
    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param quality: determines how much the Luck attribute affects the generation chance. Higher qualities make the luck attribute affect the generation chance more.
    :param conditions: conditions for the generation of the entry.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void addEmptyEntryHelper(int weight, int quality, ZenLootConditionWrapper[] conditions, @Optional String name)
    :outertype: LootPool

    Adds a new ``empty`` type entry to the pool.

    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param quality: determines how much the Luck attribute affects the generation chance. Higher qualities make the luck attribute affect the generation chance more.
    :param conditions: an array of instances of `DataMap <https://crafttweaker.readthedocs.io/en/latest/#Vanilla/Data/DataMap/>`_, each a LootCondition in JSON form. It is recommended that the keys are enclosed in quotes to avoid conflicts between JSON key names and ZenScript keywords.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void addEmptyEntryJson(int weight, int quality, DataMap[] conditions, @Optional String name)
    :outertype: LootPool

    Adds a new ``empty`` type entry to the pool.

    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param quality: determines how much the Luck attribute affects the generation chance. Higher qualities make the luck attribute affect the generation chance more.
    :param conditions: conditions for the generation of the entry.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void addEmptyEntry(int weight, int quality, @Optional String name)
    :outertype: LootPool

    Adds a new ``empty`` type entry to the pool with no conditions.

    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param quality: determines how much the Luck attribute affects the generation chance. Higher qualities make the luck attribute affect the generation chance more.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void addEmptyEntry(int weight, @Optional String name)
    :outertype: LootPool

    Adds a new ``empty`` type entry to the pool with no conditions, and a quality of 0.

    :param weight: the main component that determines the generation chance. Higher weights make entries generate more often.
    :param quality: determines how much the Luck attribute affects the generation chance. Higher qualities make the luck attribute affect the generation chance more.
    :param name: (Optional) a name for the entry. Must be unique within the pool.

.. java:method:: void setRolls(float min, float max)
    :outertype: LootPool

    Sets the minimum and maximum rolls of the pool to the specified values.

    :param min: the new minimum rolls value.
    :param max: the new maximum rolls value.

.. java:method:: void setBonusRolls(float min, float max)
    :outertype: LootPool

    Sets the minimum and maximum bonus rolls of the pool to the specified values.

    :param min: the new minimum bonus rolls value.
    :param max: the new maximum bonus rolls value.